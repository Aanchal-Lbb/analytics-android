
apply plugin: 'android-library'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    mavenCentral()
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
    }
}

group = 'io.segment.android'
archivesBaseName = 'analytics-android'
version = '0.6.10'

dependencies {
    compile "com.mixpanel.android:mixpanel-android:4.1.0@aar"
}

android {
    buildToolsVersion "19.0.1"
    compileSdkVersion 19

    defaultConfig {
        testInstrumentationRunner "android.test.InstrumentationTestRunner"
    }

     sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src', 'bundled-src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        instrumentTest.setRoot('tests')
        instrumentTest {
            java.srcDirs = ['tests/src']
            resources.srcDirs = ['tests/src']
            res.srcDirs = ['tests/res']
            assets.srcDirs = ['tests/assets']
        }
    }

    dependencies {
        compile fileTree(dir: 'libs/', include: '*.jar')
    }
}

//
// Enable jar builds
//

android.libraryVariants.all { variant ->
  def name = variant.buildType.name
  if (name.equals(com.android.builder.BuilderConstants.DEBUG)) {
    return; // skip debug builds
  }
  def task = project.tasks.create "jar${name.capitalize()}", Jar
  task.dependsOn variant.javaCompile
  // include Java classes
  task.from variant.javaCompile.destinationDir
  // include dependent jars with some exceptions
  task.from configurations.compile.findAll {
        it.getName() != 'android.jar' &&
        !it.getName().startsWith('junit')
    }.collect {
        it.isDirectory() ? it : zipTree(it)
    }
  artifacts.add('archives', task);
}


configurations {
    archives {
        extendsFrom configurations.default
    }
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    configuration = configurations.archives

    repositories.mavenDeployer {
        pom.project {
            name project.name
            packaging 'jar'
            description 'Segment.io Android Analytics Library \n' +
                    'https://segment.io/mobile'
            url 'github.com/segmentio/analytics-android'
            scm {
                url 'https://github.com/segmentio/analytics-android'
                connection 'scm:git:http://github.com/segmentio/analytics-android'
                developerConnection 'scm:git:git@github.com:segmentio/analytics-android.git'
            }
            licenses {
                license {
                    name 'MIT License'
                    url 'http://opensource.org/licenses/MIT'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'ivolo'
                    name 'Ilya Volodarsky'
                    email 'ilya@segment.io'
                }
            }
        }

        beforeDeployment {
            MavenDeployment deployment -> signing.signPom(deployment)
        }
        repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
            authentication(userName: sonatypeUsername, password: sonatypePassword)
        }

    }
}